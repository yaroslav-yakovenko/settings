server {
	listen	  80;
	server_name  media.*;

	set $referer_search_query '';
    set $var_cookie_special "$cookie_special";
    set $var_cookie_search "$cookie_search";
	set $my_debug "";

	root /home/dumped_static;

#	include /usr/local/nginx/conf/my_proxy.conf;

	proxy_cache_use_stale error timeout invalid_header http_500 http_502 http_503 http_504 http_404;
	proxy_set_header Host $http_host;
	proxy_set_header X-Real-IP $remote_addr;
	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	proxy_set_header If-Modified-Since "";
	proxy_set_header Accept-Encoding "";

	proxy_intercept_errors on;

    location = /isok.php {
        include /usr/local/nginx/conf/fastcgi.conf;
        access_log /usr/local/nginx/logs/isok.log custom;
        fastcgi_param  SCRIPT_FILENAME  /home/toggle3/scripts/nginx/isok.php;
        fastcgi_pass upstream_fastcgi;
    }
    location = / {
		empty_gif;
	}
    location ~ /auto/ {
        try_files $uri @auto_cache_proxy;
    }

    # Support for virtual name in urls (SEO)
    # Example: http://basemedia1.toggle.com/screenshots/10/10000_100x61xaeff04f71f/Adobe-photoshop.jpg
    location ~* "^(.+)/([^\.\/]+)\.(jpg|jpeg|gif|gz|zip|css|swf|png|htc|ico|txt|js)$" {
        try_files $uri $1.$3 @media_proxy;
        expires 30d;
    }
    # Support for timestamps in urls (required for correct design upgrade based on files mtime)
    # Example: http://basemedia1.toggle.com/t3/user/style.1234567890.css
    location ~* "^(.+)\.([0-9]{10})\.(jpg|jpeg|gif|gz|zip|css|swf|png|htc|ico|txt|js)$" {
        try_files $uri $1.$3 @media_proxy;
        expires 30d;
    }
    # Support for both timestamps and names in urls
    # Example: http://basemedia1.toggle.com/screenshots/10/10000_100x61xaeff04f71f/Adobe-photoshop.1234567890.jpg
    location ~* "^(.+)/([^\.\/]+)\.([0-9]{10})\.(jpg|jpeg|gif|gz|zip|css|swf|png|htc|ico|txt|js)$" {
        try_files $uri $1.$4 @media_proxy;
        expires 30d;
    }

    location = /robots.txt {
        access_log off;
        default_type  text/plain;
# TODO: decide what to do with media robots.txt
        content_by_lua 'ngx.say("User-Agent: *");';
    }

    location / {
        try_files $uri @media_proxy;
		expires 30d;
    }

    error_page 400 403 404 405 406 408 410 411 412 413 414 415 416 500 501 502 503 504 505 506 509 @empty_gif;
	location @empty_gif {
        access_log off;
		empty_gif;
	}

    location @media_proxy {
		expires 30d;
		content_by_lua '
			local is_valid = 0;
			local new_uri = "";
			local hash1, hash2, preferred_name = string.match(ngx.var.uri, "/%d%d%d/%d%d%d/%d%d%d/(%w%w%w)_(%w%w%w)_([%w_\-]+).png")
			if hash1 ~= nil and hash2 ~= nil and preferred_name ~= nil then
				if hash2 == string.sub(ngx.md5(preferred_name.."__salt"), 0, 3) then
					new_uri = string.sub(ngx.var.uri, 0, 16)..".png";
					is_valid = 1;
				end
			end
--			if is_valid == 1 then
				if new_uri ~= "" then
					ngx.req.set_uri(new_uri)
				end
				return ngx.exec("@media_proxy_real");
--			else
--				return ngx.exec("@empty_gif");
--			end
		';
	}

    location @media_proxy_real {
		proxy_cache mediacache;
		proxy_cache_valid 200 301 302 304 8h;
		proxy_cache_valid 404 1h;
		proxy_cache_valid any 5m;
		proxy_cache_key "$scheme|$proxy_host$uri$is_args$args|$http_host";

        proxy_connect_timeout 30;
        proxy_read_timeout 30;
        proxy_send_timeout 30;

#		proxy_set_header Authorization '';
#		proxy_hide_header Last-Modified;
		proxy_hide_header X-Amz-Id-2;
		proxy_hide_header X-Amz-Request-Id;
		proxy_hide_header ETag;
		proxy_hide_header "Set-Cookie";
		proxy_hide_header "Cookie";
		proxy_ignore_headers "Cache-Control" "Expires";

#		proxy_buffering off;
		proxy_intercept_errors on;

		proxy_set_header Host "scrdn.s3.amazonaws.com";
		proxy_pass http://scrdn.s3.amazonaws.com;
	}

    location @auto_cache_proxy {

        proxy_hide_header "Set-Cookie";
        proxy_ignore_headers "Cache-Control" "Expires";
        proxy_connect_timeout 30;
        proxy_read_timeout 30;
        proxy_send_timeout 30;

        resolver 127.0.0.1;

        set $p_scheme 'http';
        set $p_host '';
        set $p_uri '';
        if ($request_uri ~ "^/auto/(http|https):[/]+([a-z][a-z0-9\-.]+)(/.*)$") {
            set $p_scheme $1;
            set $p_host $2;
            set $p_uri $3;
        }
        if ($request_uri ~ "^/auto/([a-z][a-z0-9\-.]+)(/.*)$") {
            set $p_host $1;
            set $p_uri $2;
        }
        if ($p_host = '') {
            return 404;
        }

        proxy_set_header Host $p_host;
		proxy_intercept_errors on;

        access_log off;

        proxy_cache mediacache;
		proxy_cache_methods GET HEAD;
        proxy_cache_valid  200 301 302 8h;
        proxy_cache_valid any 5m;
        proxy_cache_key "$p_scheme|$p_host$p_uri$is_args$args|$http_host";

        expires 1h;

        proxy_pass $p_scheme://$p_host$p_uri;
    }

}
